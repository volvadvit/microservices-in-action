services:
  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: keycloak
    environment:
      # Value of the "iss" property from a JWT token.
      # Must be changed to "localhost" to access UI-console but additional bridge required: https://medium.com/@kostapchuk/integrating-keycloak-with-spring-boot-in-a-dockerized-environment-813eab1f140c
      # Or we can just add "127.0.0.1 keycloak" to the "hosts" and open it with "http://keycloak:7080/auth"
      KC_HOSTNAME: keycloak
      KC_HOSTNAME_PORT: 7080
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: nimda
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
    command: [ "start-dev", "--import-realm", "--http-port", "7080", "--https-port", "7443" ]
    volumes:
      - './keycloak/import:/opt/keycloak/data/import'
    healthcheck:
      #TODO fix health-check
#      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000; echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost:9000\r\nConnection: close\r\n\r\n' >&3;cat <&3 | grep -q '\"status\": \"UP\"' && exit 0 || exit 1" ]
      test: "curl --fail --silent http://keycloak:7080/health/ready | grep 'UP' || exit 1"
      interval: 5s
      timeout: 2s
      retries: 30
      start_period: 20s
    ports:
      - "7080:7080"
      - "7443:7443"
    networks:
      backend:
        aliases:
          - "keycloak"

  postgres:
    image: postgres:latest
    container_name: postgres-dev
    environment:
      POSTGRES_DB: "ostock_db"
      POSTGRES_USER: "myuser"
      POSTGRES_PASSWORD: "mypassword"
    ports:
      - "5432:5432"
    expose:
      - "5432"
    volumes:
      - ./sql/init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./sql/data.sql:/docker-entrypoint-initdb.d/2-data.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      retries: 5
      start_period: 10s
      timeout: 10s
    networks:
      backend:
        aliases:
          - "postgres"

  redis:
    image: redis:latest
    container_name: redis-dev
    restart: always
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=mypassword
      - REDIS_PORT=6379
      - REDIS_DATABASES=2
    networks:
      backend:
        aliases:
          - "redis"

  config-server:
    build: ./config-server/
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    healthcheck:
      test: "curl --fail --silent http://config-server:8888/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      backend:
        aliases:
          - "config-server"

  eureka-server:
    build: ./eureka-server/
    container_name: eureka-server
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "eureka-server"

  gateway-service:
    build: ./gateway-service/
    container_name: gateway-service
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_started
    ports:
      - "8765:8765"
    networks:
      backend:
        aliases:
          - "gateway-service"

  licensing-service:
    build: ./licensing-service/
    container_name: licensing-service
    ports:
      - "8081:8081"
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_started
      redis:
        condition: service_started
    networks:
      backend:
        aliases:
          - "licensing-service"

  organization-service:
    build: ./organization-service/
    container_name: organization-service
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
    depends_on:
      keycloak:
        #TODO change to 'service_healthy'
        condition: service_started
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_started
    ports:
      - "8084:8084"
    networks:
      backend:
        aliases:
          - "organization-service"

networks:
  backend:
    driver: bridge